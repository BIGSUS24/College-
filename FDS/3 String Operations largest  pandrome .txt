string = input("Enter the string: ")

# Longest word in string
string_list = string.split()
longest = 0
index = 0
for i in range(len(string_list)):
    if len(string_list[i]) > longest:
        longest = len(string_list[i])
        index = i

print(f"Longest word in the string is: {string_list[index]}")

# count the occurence of any character
a=input("Enter the character you want to count the occurence of: ")
print("The character",a,"appears",string.count(a),"times")

#Check palindrome
string2 = input("Enter the string: (for palindrome check) ")

if string2[::-1] == string2:
    print("String is a palindrome")
else:
    print("String is not a palindrome")

#Substring to search
print("Enter the substring you want to search for: ")
sub_string = input()

index = string.find(sub_string)
if index==-1:
    print("No substring found")
else:
    print(f"Index of substring in string is at: {string.find(sub_string)}")

# Word Count
word_counts = {}  # Create an empty dictionary to store word counts
  # Split the text into words (case-insensitive)
for word in string.lower().split():
    # Remove non-alphanumeric characters
    clean_word = ''.join(c for c in word if c.isalnum())
    if clean_word:  # Check if there's any word left after cleaning
        if clean_word in word_counts:
            word_counts[clean_word] += 1
        else:
            word_counts[clean_word] = 1
print(word_counts)

A string is a sequence of characters. It is one of the most commonly used data types in programming for handling text. In Python, strings are immutable, meaning once a string is created, its contents cannot be changed directly. Instead, new strings are generated if any modifications are made.

Strings are often used to store text, such as names, messages, or any other kind of data that can be represented as a sequence of characters. Operations on strings are highly efficient, making them perfect for tasks like searching, slicing, comparing, and transforming text.

String Operations
Splitting:
The split() operation divides a string into a list of words or substrings, using a specified delimiter (like spaces or commas). This operation is useful when you want to break down a large block of text into smaller, manageable parts for further processing, like counting words or searching for specific patterns.

Indexing:
Indexing refers to accessing a specific character within a string. Since strings are ordered, each character is assigned an index, starting from 0 for the first character. This allows you to retrieve individual characters from the string using their positions.

Slicing:
Slicing involves extracting a substring from a string by specifying a start and end index. This operation allows you to grab a portion of the string. It is useful for tasks such as reversing a string, extracting parts of a string, or processing specific sections of text.

Reversing:
Reversing a string is a process where the order of characters in the string is flipped. This is often used for tasks like checking if a string is the same when read forwards and backwards (i.e., checking if itâ€™s a palindrome). Reversing is achieved by slicing the string in reverse order.

Counting:
The count() operation counts how many times a specific character or substring appears in a string. This is useful when you need to find the frequency of a character or word within a larger block of text.

Finding Substring:
The find() operation searches for the occurrence of a substring within a string and returns its index (position) if found. If the substring is not found, it returns -1. This operation is commonly used when you need to locate the position of a specific part of the string.

Concatenation:
Concatenation is the process of combining two or more strings into one. This is usually done with the + operator, which appends one string to another. This operation is commonly used to build longer strings from smaller pieces, such as forming sentences from words.

Cleaning and Normalization:
In some cases, strings are cleaned or normalized before further processing. This might involve removing unwanted characters (like punctuation or extra spaces) or converting the string to a consistent format (like making all characters lowercase). This helps ensure that comparisons and counting operations are accurate and consistent.

Dictionaries for Word Counting:
Dictionaries are often used to count occurrences of words or characters in a string. A dictionary stores data in key-value pairs, where the key represents the word (or character), and the value represents the count of occurrences. This operation is useful for generating word frequency distributions from text data.